# Python CircleCI 2.0 configuration file
version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3

    # working_directory: ~/repo

    steps:
      # Step 1: obtain repo from GitHub
      - checkout
      # Step 2: create virtual env and install dependencies
      - run:
          name: install dependencies
          command: |
            pip install --upgrade setuptools
            sudo apt-get install python3-venv
            python3 -m venv venv
            . venv/bin/activate
            pip install tox
            pip install -r requirements.txt
      # Step 3: run linter and tests
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            tox
      # - run:
      #     command: |
      #       #rm -rf venv
      #       #python3 -m venv  venv
      #       #. venv/bin/activate
      #       #sudo pip3 install -r requirements.txt
      #       #tox -r
      # - run:
      #     name: Setup the database
      #     command: 
      #       sudo apt-get install postgresql postgresql-contrib
      #       pwd
      #       psql -h localhost -U ubuntu -d makarablog -a -f schema.sql
      - run:
          name: Running coverage
          command: |
            # coverage run blog/test*.py && coverage report
            . venv/bin/activate
            pip install coverage
            pip install django-coverage
            coverage run --source='.' manage.py test --cov-fail-under=100
            coverage report
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: test-results

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = godii" >> ~/.pypirc
            echo -e "password = $password" >> ~/.pypirc

      - run:
          name: create packages
          command: |
            python setup.py sdist
      - run:
          name: upload to pypi
          command: |
            python3 -m venv  venv
             . venv/bin/activate
             pip3 install --upgrade pip
            pip3 install twine
            twine upload dist/*  --skip-existing 
      # - run:
      #     name: executing ansible to a remote server
      #     command: |
      #        . venv/bin/activate
      #        ansible-playbook ansible/makarablog.yml -i hosts ansible/hosts --become

workflows:
  version: 2
  build:
    jobs:
      - build:
           filters:
             branches:
               only: master                   
            